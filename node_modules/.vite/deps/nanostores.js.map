{
  "version": 3,
  "sources": ["../../nanostores/task/index.js", "../../nanostores/clean-stores/index.js", "../../nanostores/lifecycle/index.js", "../../nanostores/action/index.js", "../../nanostores/listen-keys/index.js", "../../nanostores/keep-mount/index.js", "../../nanostores/atom/index.js", "../../nanostores/computed/index.js", "../../nanostores/deep-map/path.js", "../../nanostores/deep-map/index.js", "../../nanostores/map/index.js", "../../nanostores/deprecated/index.js"],
  "sourcesContent": ["let tasks = 0\r\nlet resolves = []\r\n\r\nexport function startTask() {\r\n  tasks += 1\r\n  return () => {\r\n    tasks -= 1\r\n    if (tasks === 0) {\r\n      let prevResolves = resolves\r\n      resolves = []\r\n      for (let i of prevResolves) i()\r\n    }\r\n  }\r\n}\r\n\r\nexport function task(cb) {\r\n  let endTask = startTask()\r\n  return cb().finally(endTask)\r\n}\r\n\r\nexport function allTasks() {\r\n  if (tasks === 0) {\r\n    return Promise.resolve()\r\n  } else {\r\n    return new Promise(resolve => {\r\n      resolves.push(resolve)\r\n    })\r\n  }\r\n}\r\n\r\nexport function cleanTasks() {\r\n  tasks = 0\r\n}\r\n", "import { cleanTasks } from '../task/index.js'\r\n\r\nexport let clean = Symbol('clean')\r\n\r\nexport let cleanStores = (...stores) => {\r\n  if (process.env.NODE_ENV === 'production') {\r\n    throw new Error(\r\n      'cleanStores() can be used only during development or tests'\r\n    )\r\n  }\r\n  cleanTasks()\r\n  for (let store of stores) {\r\n    if (store) {\r\n      if (store.mocked) delete store.mocked\r\n      if (store[clean]) store[clean]()\r\n    }\r\n  }\r\n}\r\n", "import { clean } from '../clean-stores/index.js'\r\n\r\nconst START = 0\r\nconst STOP = 1\r\nconst SET = 2\r\nconst NOTIFY = 3\r\nconst MOUNT = 5\r\nconst UNMOUNT = 6\r\nconst ACTION = 7\r\nconst REVERT_MUTATION = 10\r\n\r\nexport let on = (object, listener, eventKey, mutateStore) => {\r\n  object.events = object.events || {}\r\n  if (!object.events[eventKey + REVERT_MUTATION]) {\r\n    object.events[eventKey + REVERT_MUTATION] = mutateStore(eventProps => {\r\n      // eslint-disable-next-line no-sequences\r\n      object.events[eventKey].reduceRight((event, l) => (l(event), event), {\r\n        shared: {},\r\n        ...eventProps\r\n      })\r\n    })\r\n  }\r\n  object.events[eventKey] = object.events[eventKey] || []\r\n  object.events[eventKey].push(listener)\r\n  return () => {\r\n    let currentListeners = object.events[eventKey]\r\n    let index = currentListeners.indexOf(listener)\r\n    currentListeners.splice(index, 1)\r\n    if (!currentListeners.length) {\r\n      delete object.events[eventKey]\r\n      object.events[eventKey + REVERT_MUTATION]()\r\n      delete object.events[eventKey + REVERT_MUTATION]\r\n    }\r\n  }\r\n}\r\n\r\nexport let onStart = (store, listener) =>\r\n  on(store, listener, START, runListeners => {\r\n    let originListen = store.listen\r\n    store.listen = arg => {\r\n      if (!store.lc && !store.starting) {\r\n        store.starting = true\r\n        runListeners()\r\n        delete store.starting\r\n      }\r\n      return originListen(arg)\r\n    }\r\n    return () => {\r\n      store.listen = originListen\r\n    }\r\n  })\r\n\r\nexport let onStop = (store, listener) =>\r\n  on(store, listener, STOP, runListeners => {\r\n    let originOff = store.off\r\n    store.off = () => {\r\n      runListeners()\r\n      originOff()\r\n    }\r\n    return () => {\r\n      store.off = originOff\r\n    }\r\n  })\r\n\r\nexport let onSet = (store, listener) =>\r\n  on(store, listener, SET, runListeners => {\r\n    let originSet = store.set\r\n    let originSetKey = store.setKey\r\n    if (store.setKey) {\r\n      store.setKey = (changed, changedValue) => {\r\n        let isAborted\r\n        let abort = () => {\r\n          isAborted = true\r\n        }\r\n\r\n        runListeners({\r\n          abort,\r\n          changed,\r\n          newValue: { ...store.value, [changed]: changedValue }\r\n        })\r\n        if (!isAborted) return originSetKey(changed, changedValue)\r\n      }\r\n    }\r\n    store.set = newValue => {\r\n      let isAborted\r\n      let abort = () => {\r\n        isAborted = true\r\n      }\r\n\r\n      runListeners({ abort, newValue })\r\n      if (!isAborted) return originSet(newValue)\r\n    }\r\n    return () => {\r\n      store.set = originSet\r\n      store.setKey = originSetKey\r\n    }\r\n  })\r\n\r\nexport let onNotify = (store, listener) =>\r\n  on(store, listener, NOTIFY, runListeners => {\r\n    let originNotify = store.notify\r\n    store.notify = changed => {\r\n      let isAborted\r\n      let abort = () => {\r\n        isAborted = true\r\n      }\r\n\r\n      runListeners({ abort, changed })\r\n      if (!isAborted) return originNotify(changed)\r\n    }\r\n    return () => {\r\n      store.notify = originNotify\r\n    }\r\n  })\r\n\r\nexport let STORE_UNMOUNT_DELAY = 1000\r\n\r\nexport let onMount = (store, initialize) => {\r\n  let listener = payload => {\r\n    let destroy = initialize(payload)\r\n    if (destroy) store.events[UNMOUNT].push(destroy)\r\n  }\r\n  return on(store, listener, MOUNT, runListeners => {\r\n    let originListen = store.listen\r\n    store.listen = (...args) => {\r\n      if (!store.lc && !store.active) {\r\n        store.active = true\r\n        runListeners()\r\n      }\r\n      return originListen(...args)\r\n    }\r\n\r\n    let originOff = store.off\r\n    store.events[UNMOUNT] = []\r\n    store.off = () => {\r\n      originOff()\r\n      setTimeout(() => {\r\n        if (store.active && !store.lc) {\r\n          store.active = false\r\n          for (let destroy of store.events[UNMOUNT]) destroy()\r\n          store.events[UNMOUNT] = []\r\n        }\r\n      }, STORE_UNMOUNT_DELAY)\r\n    }\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      let originClean = store[clean]\r\n      store[clean] = () => {\r\n        for (let destroy of store.events[UNMOUNT]) destroy()\r\n        store.events[UNMOUNT] = []\r\n        store.active = false\r\n        originClean()\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      store.listen = originListen\r\n      store.off = originOff\r\n    }\r\n  })\r\n}\r\n\r\n\r\nexport let onAction = (store, listener) =>\r\n  on(store, listener, ACTION, runListeners => {\r\n    let errorListeners = {}\r\n    let endListeners = {}\r\n    let originAction = store.action\r\n    store.action = (id, actionName, args) => {\r\n      runListeners({\r\n        id,\r\n        actionName,\r\n        args,\r\n        onEnd: l => {\r\n          (endListeners[id] || (endListeners[id] = [])).push(l)\r\n        },\r\n        onError: l => {\r\n          (errorListeners[id] || (errorListeners[id] = [])).push(l)\r\n        }\r\n      })\r\n      return [\r\n        error => {\r\n          if (errorListeners[id]) {\r\n            for (let l of errorListeners[id]) l({ error })\r\n          }\r\n        },\r\n        () => {\r\n          if (endListeners[id]) {\r\n            for (let l of endListeners[id]) l()\r\n            delete errorListeners[id]\r\n            delete endListeners[id]\r\n          }\r\n        }\r\n      ]\r\n    }\r\n    return () => {\r\n      store.action = originAction\r\n    }\r\n  })\r\n", "import { startTask } from '../task/index.js'\r\n\r\nexport let lastAction = Symbol()\r\nexport let actionId = Symbol()\r\n\r\nlet uid = 0\r\n\r\nexport let doAction = (store, actionName, cb, args) => {\r\n  let id = ++uid\r\n  let tracker = { ...store }\r\n  tracker.set = (...setArgs) => {\r\n    store[lastAction] = actionName\r\n    store[actionId] = id\r\n    store.set(...setArgs)\r\n    delete store[lastAction]\r\n    delete store[actionId]\r\n  }\r\n  if (store.setKey) {\r\n    tracker.setKey = (...setArgs) => {\r\n      store[lastAction] = actionName\r\n      store[actionId] = id\r\n      store.setKey(...setArgs)\r\n      delete store[lastAction]\r\n      delete store[actionId]\r\n    }\r\n  }\r\n  let result = cb(tracker, ...args)\r\n  if (result instanceof Promise) {\r\n    let [err, end] =\r\n      typeof store.action !== 'undefined'\r\n        ? store.action(id, actionName, args)\r\n        : []\r\n    let endTask = startTask()\r\n    return result\r\n      .catch(error => {\r\n        err && err(error)\r\n        throw error\r\n      })\r\n      .finally(() => {\r\n        endTask()\r\n        end && end()\r\n      })\r\n  }\r\n  return result\r\n}\r\n\r\nexport let action =\r\n  (store, actionName, cb) =>\r\n  (...args) =>\r\n    doAction(store, actionName, cb, args)\r\n", "export function listenKeys(store, keys, listener) {\r\n  let keysSet = new Set([...keys, undefined])\r\n  return store.listen((value, changed) => {\r\n    if (keysSet.has(changed)) {\r\n      listener(value, changed)\r\n    }\r\n  })\r\n}\r\n", "export let keepMount = store => {\r\n  store.listen(() => {})\r\n}\r\n", "import { clean } from '../clean-stores/index.js'\r\n\r\nlet listenerQueue = []\r\n\r\nexport let notifyId = 0\r\n\r\nexport let atom = (initialValue, level) => {\r\n  let currentListeners\r\n  let nextListeners = []\r\n  let store = {\r\n    lc: 0,\r\n    l: level || 0,\r\n    value: initialValue,\r\n    set(data) {\r\n      store.value = data\r\n      store.notify()\r\n    },\r\n    get() {\r\n      if (!store.lc) {\r\n        store.listen(() => {})()\r\n      }\r\n      return store.value\r\n    },\r\n    notify(changedKey) {\r\n      currentListeners = nextListeners\r\n      let runListenerQueue = !listenerQueue.length\r\n      for (let i = 0; i < currentListeners.length; i += 2) {\r\n        listenerQueue.push(\r\n          currentListeners[i],\r\n          store.value,\r\n          changedKey,\r\n          currentListeners[i + 1]\r\n        )\r\n      }\r\n\r\n      if (runListenerQueue) {\r\n        notifyId++\r\n        for (let i = 0; i < listenerQueue.length; i += 4) {\r\n          let skip = false\r\n          for (let j = i + 7; j < listenerQueue.length; j += 4) {\r\n            if (listenerQueue[j] < listenerQueue[i + 3]) {\r\n              skip = true\r\n              break\r\n            }\r\n          }\r\n\r\n          if (skip) {\r\n            listenerQueue.push(\r\n              listenerQueue[i],\r\n              listenerQueue[i + 1],\r\n              listenerQueue[i + 2],\r\n              listenerQueue[i + 3]\r\n            )\r\n          } else {\r\n            listenerQueue[i](listenerQueue[i + 1], listenerQueue[i + 2])\r\n          }\r\n        }\r\n        listenerQueue.length = 0\r\n      }\r\n    },\r\n    listen(listener, listenerLevel) {\r\n      if (nextListeners === currentListeners) {\r\n        nextListeners = nextListeners.slice()\r\n      }\r\n\r\n      store.lc = nextListeners.push(listener, listenerLevel || store.l) / 2\r\n\r\n      return () => {\r\n        if (nextListeners === currentListeners) {\r\n          nextListeners = nextListeners.slice()\r\n        }\r\n        let index = nextListeners.indexOf(listener)\r\n        if (~index) {\r\n          nextListeners.splice(index, 2)\r\n          store.lc--\r\n          if (!store.lc) store.off()\r\n        }\r\n      }\r\n    },\r\n    subscribe(cb, listenerLevel) {\r\n      let unbind = store.listen(cb, listenerLevel)\r\n      cb(store.value)\r\n      return unbind\r\n    },\r\n    off() {} /* It will be called on last listener unsubscribing.\r\n                We will redefine it in onMount and onStop. */\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    store[clean] = () => {\r\n      nextListeners = []\r\n      store.lc = 0\r\n      store.off()\r\n    }\r\n  }\r\n\r\n  return store\r\n}\r\n", "import { onMount } from '../lifecycle/index.js'\r\nimport { atom, notifyId } from '../atom/index.js'\r\n\r\nexport let computed = (stores, cb) => {\r\n  if (!Array.isArray(stores)) stores = [stores]\r\n\r\n  let diamondNotifyId\r\n  let diamondArgs = []\r\n  let run = () => {\r\n    let args = stores.map(store => store.get())\r\n    if (\r\n      diamondNotifyId !== notifyId ||\r\n      args.some((arg, i) => arg !== diamondArgs[i])\r\n    ) {\r\n      diamondNotifyId = notifyId\r\n      diamondArgs = args\r\n      derived.set(cb(...args))\r\n    }\r\n  }\r\n  let derived = atom(undefined, Math.max(...stores.map(s => s.l)) + 1)\r\n\r\n  onMount(derived, () => {\r\n    let unbinds = stores.map(store => store.listen(run, derived.l))\r\n    run()\r\n    return () => {\r\n      for (let unbind of unbinds) unbind()\r\n    }\r\n  })\r\n\r\n  return derived\r\n}\r\n", "export function getPath(obj, path) {\r\n  let allKeys = getAllKeysFromPath(path)\r\n  let res = obj\r\n  for (let key of allKeys) {\r\n    if (res === undefined) {\r\n      break\r\n    }\r\n    res = res[key]\r\n  }\r\n  return res\r\n}\r\n\r\nexport function setPath(obj, path, value) {\r\n  return setByKey(obj != null ? obj : {}, getAllKeysFromPath(path), value)\r\n}\r\n\r\nfunction setByKey(obj, splittedKeys, value) {\r\n  let key = splittedKeys[0]\r\n  ensureKey(obj, key, splittedKeys[1])\r\n  let copy = Array.isArray(obj) ? [...obj] : { ...obj }\r\n  if (splittedKeys.length === 1) {\r\n    if (value === undefined) {\r\n      if (Array.isArray(obj)) {\r\n        copy.splice(key, 1)\r\n      } else {\r\n        delete copy[key]\r\n      }\r\n    } else {\r\n      copy[key] = value\r\n    }\r\n    return copy\r\n  }\r\n  let newVal = setByKey(obj[key], splittedKeys.slice(1), value)\r\n  obj[key] = newVal\r\n  return obj\r\n}\r\n\r\nconst ARRAY_INDEX = /(.*)\\[(\\d+)\\]/\r\n\r\nfunction getAllKeysFromPath(path) {\r\n  return path.split('.').flatMap(key => {\r\n    if (ARRAY_INDEX.test(key)) {\r\n      let res = key.match(ARRAY_INDEX)\r\n      return res.slice(1)\r\n    }\r\n    return [key]\r\n  })\r\n}\r\n\r\nfunction ensureKey(obj, key, nextKey) {\r\n  if (key in obj) {\r\n    return\r\n  }\r\n  let nextKeyAsInt = parseInt(\r\n    nextKey !== null && nextKey !== undefined ? nextKey : ''\r\n  )\r\n  if (Number.isNaN(nextKeyAsInt)) {\r\n    obj[key] = {}\r\n  } else {\r\n    obj[key] = Array(nextKeyAsInt + 1).fill(undefined)\r\n  }\r\n}\r\n", "import { atom } from '../atom/index.js'\r\nimport { getPath, setPath } from './path.js'\r\n\r\nexport { getPath, setPath } from './path.js'\r\n\r\nexport function deepMap(initial = {}) {\r\n  let store = atom(initial)\r\n  store.setKey = (key, value) => {\r\n    if (getPath(store.value, key) !== value) {\r\n      store.value = setPath(store.value, key, value)\r\n      store.notify(key)\r\n    }\r\n  }\r\n  return store\r\n}\r\n", "import { atom } from '../atom/index.js'\r\n\r\nexport let map = (value = {}) => {\r\n  let store = atom(value)\r\n\r\n  store.setKey = function (key, newValue) {\r\n    if (typeof newValue === 'undefined') {\r\n      if (key in store.value) {\r\n        store.value = { ...store.value }\r\n        delete store.value[key]\r\n        store.notify(key)\r\n      }\r\n    } else if (store.value[key] !== newValue) {\r\n      store.value = {\r\n        ...store.value,\r\n        [key]: newValue\r\n      }\r\n      store.notify(key)\r\n    }\r\n  }\r\n\r\n  return store\r\n}\r\n", "import { onMount, on } from '../lifecycle/index.js'\r\nimport { doAction } from '../action/index.js'\r\nimport { clean } from '../clean-stores/index.js'\r\nimport { map } from '../map/index.js'\r\n\r\nfunction warn(text) {\r\n  if (typeof console !== 'undefined' && console.warn) {\r\n    console.groupCollapsed('Nano Stores: ' + text)\r\n    console.trace('Source of deprecated call')\r\n    console.groupEnd()\r\n  }\r\n}\r\n\r\nexport function mapTemplate(init) {\r\n  warn('Replace mapTemplate() to function with map() call inside and own cache')\r\n\r\n  let Template = (id, ...args) => {\r\n    if (!Template.cache[id]) {\r\n      Template.cache[id] = Template.build(id, ...args)\r\n    }\r\n    return Template.cache[id]\r\n  }\r\n\r\n  Template.build = (id, ...args) => {\r\n    let store = map({ id })\r\n    onMount(store, () => {\r\n      let destroy\r\n      if (init) destroy = init(store, id, ...args)\r\n      return () => {\r\n        delete Template.cache[id]\r\n        if (destroy) destroy()\r\n      }\r\n    })\r\n    return store\r\n  }\r\n\r\n  Template.cache = {}\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    Template[clean] = () => {\r\n      for (let id in Template.cache) {\r\n        Template.cache[id][clean]()\r\n      }\r\n      Template.cache = {}\r\n    }\r\n  }\r\n\r\n  return Template\r\n}\r\n\r\nconst BUILD = 4\r\n\r\nexport let onBuild = (Template, listener) =>\r\n  on(Template, listener, BUILD, runListeners => {\r\n    let originBuild = Template.build\r\n    Template.build = (...args) => {\r\n      let store = originBuild(...args)\r\n      runListeners({ store })\r\n      return store\r\n    }\r\n    return () => {\r\n      Template.build = originBuild\r\n    }\r\n  })\r\n\r\nexport let actionFor = (Template, actionName, cb) => {\r\n  return (store, ...rest) => doAction(store, actionName, cb, rest)\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
